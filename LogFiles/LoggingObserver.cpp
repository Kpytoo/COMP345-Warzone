//
// Created by william on 06/11/24.
//

#include "LoggingObserver.h"
#include <algorithm>
#include <fstream>

/**
 * Attaches an Observer to this Subject.
 * Adds the specified observer to the list of observers that will
 * receive notifications when an event occurs in this Subject.
 *
 * @param observer A pointer to the Observer to attach.
 */
void Subject::attach(Observer* observer) {
    observers.push_back(observer);
}

/**
 * Detaches an Observer from this Subject.
 * Removes the specified observer from the list of observers,
 * so it will no longer receive notifications from this Subject.
 *
 * @param observer A pointer to the Observer to detach.
 */
void Subject::detach(Observer* observer) {
    observers.erase(std::remove(observers.begin(), observers.end(), observer), observers.end());
}

/**
 * Notifies all attached Observers of an event.
 * Calls the update() method on each Observer in the list, passing
 * the ILoggable object containing the event information.
 *
 * @param loggable A pointer to the ILoggable object containing the
 *                 information to log.
 */
void Subject::notify(ILoggable* loggable) {
    for (auto* observer : observers)
        observer->update(loggable);
}

LogObserver::LogObserver() {
    std::ofstream("gamelog.txt").write("", 0);
}

/**
 * Logs an event to the "gamelog.txt" file.
 * Writes the log string generated by the loggable object's stringToLog()
 * method to the log file, appending the new log entry to the file.
 *
 * @param loggable A pointer to the ILoggable object containing the
 *                 information to log.
 */
void LogObserver::update(ILoggable* loggable) {
    std::ofstream logFile("gamelog.txt", std::ios::app);
    logFile << loggable->stringToLog() << std::endl;
    logFile.close();
}
